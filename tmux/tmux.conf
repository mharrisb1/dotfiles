##### XDG + TPM #####
# Store plugins
set-environment -g TMUX_PLUGIN_MANAGER_PATH "/home/workstation/dotfiles/tmux/plugins"

# Initialize TPM
run "/home/workstation/dotfiles/tmux/plugins/tpm/tpm"

##### UX niceties #####
set -g mouse on
set -g default-terminal "screen-256color"
setw -g automatic-rename on
set -g renumber-windows on
set -g set-titles on
set -g monitor-activity on
set -g visual-activity off

##### Statusline (optional) #####
set -g status-interval 2
set -g status-bg colour235
set -g status-fg white
set -g status-left "#[fg=green]#S "
set -g status-right "#[fg=yellow]%Y-%m-%d %H:%M"

##### Copy/Paste – robust, OS-aware, remote-friendly #####
# 1) Tell tmux to use the host clipboard via OSC52 when possible (tmux ≥3.2 + supported terminal)
set -g set-clipboard on
# Advertise clipboard capability to tmux for common terminals
set -ag terminal-features ",xterm-256color:clipboard,screen-256color:clipboard,tmux-256color:clipboard"

# 2) Choose the best system clipboard tool automatically (macOS, Wayland, or X11)
#    We store it in @copy_cmd and use it in key bindings below.
if-shell 'command -v pbcopy >/dev/null 2>&1'          'set -g @copy_cmd "pbcopy"'
if-shell 'command -v wl-copy >/dev/null 2>&1'         'set -g @copy_cmd "wl-copy"'
if-shell '[ -z "#{@copy_cmd}" ] && command -v xclip >/dev/null 2>&1' 'set -g @copy_cmd "xclip -selection clipboard -in"'
# Fallback: if none found, still keep OSC52 working (no external tool needed)
if-shell '[ -z "#{@copy_cmd}" ]' 'set -g @copy_cmd "cat >/dev/null"'

# 3) Make copy-mode feel great (vi keys, mouse drag to copy, and send to clipboard)
setw -g mode-keys vi

# y to yank selection; Y to yank line; Enter also yanks selection.
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "#{@copy_cmd}"
bind -T copy-mode-vi Y send -X copy-line
bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel "#{@copy_cmd}"

# Mouse drag to select, release to copy to clipboard
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "#{@copy_cmd}"

# 4) Easy “copy current pane/output” helpers
# Copy visible pane content
bind C-y capture-pane -J \; save-buffer - \; run-shell "tmux show -gv @copy_cmd | xargs -I{} sh -c 'tmux save-buffer - | {}'"
# Copy current command line (if using readline shells like bash/zsh)
bind y run-shell -b 'tmux display -p "#{pane_current_command}" >/dev/null 2>&1;'

##### Plugins #####
# TPM itself
set -g @plugin 'tmux-plugins/tpm'
# Session persistence (zellij-ish workspaces)
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
# Clipboard QoL
set -g @plugin 'tmux-plugins/tmux-yank'

# tmux-yank QoL (overrides use @copy_cmd where possible)
# Yank selection to clipboard with: y (copy-mode) or Prefix + y (pane)
set -g @yank_action 'copy-pipe-and-cancel'
set -g @override_copy_command '#{@copy_cmd}'

# Finalize TPM
run "/home/workstation/dotfiles/tmux/plugins/tpm/tpm"

# Lazygit
bind g display-popup -E -xC -yC -w 80% -h 80% -d "#{pane_current_path}" lazygit

